(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{150:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return d}));var o=n(2),i=n(9),r=(n(0),n(174)),a={title:"Usage with React"},c={id:"basic/usage-with-react",title:"Usage with React",description:"Designing Component Hierarchy",source:"@site/docs/basic/usage-with-react.md",permalink:"/docs/basic/usage-with-react",editUrl:"https://github.com/JimLiu/atom-state/edit/master/website/docs/basic/usage-with-react.md",sidebar:"someSidebar",previous:{title:"Store",permalink:"/docs/basic/store"},next:{title:"API Reference",permalink:"/docs/api/api-reference"}},l=[{value:"Designing Component Hierarchy",id:"designing-component-hierarchy",children:[]},{value:"Implementing Components",id:"implementing-components",children:[{value:"<code>components/Todo.js</code>",id:"componentstodojs",children:[]},{value:"<code>components/TodoList.js</code>",id:"componentstodolistjs",children:[]},{value:"<code>components/FilterLink.js</code>",id:"componentsfilterlinkjs",children:[]},{value:"<code>components/Footer.js</code>",id:"componentsfooterjs",children:[]},{value:"<code>components/AddTodo.js</code>",id:"componentsaddtodojs",children:[]},{value:"<code>App.js</code>",id:"appjs",children:[]}]},{value:"Passing the Store",id:"passing-the-store",children:[{value:"<code>index.js</code>",id:"indexjs",children:[]}]}],s={rightToc:l};function d(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"designing-component-hierarchy"},"Designing Component Hierarchy"),Object(r.b)("p",null,"Our design brief is simple. We want to show a list of todo items. On click, a todo item is crossed out as completed. We want to show a field where the user may add a new todo. In the footer, we want to show a toggle to show all, only completed, or only active todos."),Object(r.b)("p",null,"The following components and their props or atom state emerge from this brief:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"TodoList")," is a list showing visible todos. It filters the todos according to the current visibility filter.",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"todos: Array")," is an array of todo items with { id, text, completed } shape."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"visibilityFilter: string")," is the current visibility filter."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Todo")," is a single todo item.",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"text: string")," is the text to show."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"completed: boolean")," is whether the todo should appear crossed out."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"onClick()")," is a callback to invoke when the todo is clicked."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"FilterLink")," gets the current visibility filter and renders a link.",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"filter: string")," is the visibility filter it represents."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Footer")," is where we let the user change currently visible todos."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"AddTodo")," is an input field with an \u201cAdd\u201d button"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"App")," is the root component that renders everything else.")),Object(r.b)("h2",{id:"implementing-components"},"Implementing Components"),Object(r.b)("p",null,"Let's write the components!"),Object(r.b)("h3",{id:"componentstodojs"},Object(r.b)("inlineCode",{parentName:"h3"},"components/Todo.js")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'import React from "react";\n\nexport default function Todo({ onClick, completed, text }) {\n  return (\n    <li\n      onClick={onClick}\n      style={{\n        textDecoration: completed ? "line-through" : "none"\n      }}\n    >\n      {text}\n    </li>\n  );\n}\n\n')),Object(r.b)("h3",{id:"componentstodolistjs"},Object(r.b)("inlineCode",{parentName:"h3"},"components/TodoList.js")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'import React, { useState, useEffect, useCallback } from "react";\nimport { useAtomState, useAtomValue } from "atom-state";\nimport Todo from "./Todo";\n\nconst getVisibleTodos = (todos, filter) => {\n  switch (filter) {\n    case "all":\n      return todos;\n    case "completed":\n      return todos.filter(t => t.completed);\n    case "active":\n      return todos.filter(t => !t.completed);\n    default:\n      throw new Error("Unknown filter: " + filter);\n  }\n};\n\nexport default function TodoList() {\n  const [todos, setTodos] = useAtomState("todos");\n  const visibilityFilter = useAtomValue("visibilityFilter");\n\n  const [visibleTodos, setVisibleTodos] = useState(todos);\n\n  useEffect(() => {\n    setVisibleTodos(getVisibleTodos(todos, visibilityFilter));\n  }, [todos, visibilityFilter]);\n\n  const toggleTodo = useCallback(\n    id => {\n      setTodos(state =>\n        state.map(todo =>\n          todo.id === id ? { ...todo, completed: !todo.completed } : todo\n        )\n      );\n    },\n    [setTodos]\n  );\n\n  return (\n    <ul>\n      {visibleTodos.map(todo => (\n        <Todo key={todo.id} {...todo} onClick={() => toggleTodo(todo.id)} />\n      ))}\n    </ul>\n  );\n}\n')),Object(r.b)("h3",{id:"componentsfilterlinkjs"},Object(r.b)("inlineCode",{parentName:"h3"},"components/FilterLink.js")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'import React, { useCallback } from "react";\nimport { useAtomState } from "atom-state";\n\nexport default function FilterLink({ filter, children }) {\n  const [visibilityFilter, setVisibilityFilter] = useAtomState(\n    "visibilityFilter"\n  );\n\n  const handleClick = useCallback(() => {\n    setVisibilityFilter(filter);\n  }, [setVisibilityFilter, filter]);\n\n  const active = filter === visibilityFilter;\n\n  return (\n    <button\n      onClick={handleClick}\n      disabled={active}\n      style={{\n        marginLeft: "4px"\n      }}\n    >\n      {children}\n    </button>\n  );\n}\n\n')),Object(r.b)("h3",{id:"componentsfooterjs"},Object(r.b)("inlineCode",{parentName:"h3"},"components/Footer.js")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'import React from "react";\nimport FilterLink from "./FilterLink";\n\nexport default function Footer() {\n  return (\n    <div>\n      <span>Show: </span>\n      <FilterLink filter="all">All</FilterLink>\n      <FilterLink filter="active">Active</FilterLink>\n      <FilterLink filter="completed">Completed</FilterLink>\n    </div>\n  );\n}\n')),Object(r.b)("h3",{id:"componentsaddtodojs"},Object(r.b)("inlineCode",{parentName:"h3"},"components/AddTodo.js")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'import React, { useRef } from "react";\nimport { useSetAtomState } from "atom-state";\n\nlet nextTodoId = 10;\n\nexport default function AddTodo() {\n  let inputRef = useRef();\n  const setTodoItems = useSetAtomState("todos");\n\n  return (\n    <div>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          if (!inputRef.current.value.trim()) {\n            return;\n          }\n          setTodoItems(items => [\n            ...items,\n            {\n              id: nextTodoId++,\n              text: inputRef.current.value,\n              completed: false\n            }\n          ]);\n          inputRef.current.value = "";\n        }}\n      >\n        <input ref={inputRef} />\n        <button type="submit">Add Todo</button>\n      </form>\n    </div>\n  );\n}\n')),Object(r.b)("h3",{id:"appjs"},Object(r.b)("inlineCode",{parentName:"h3"},"App.js")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'import React from "react";\nimport Footer from "./components/Footer";\nimport AddTodo from "./components/AddTodo";\nimport TodoList from "./components/TodoList";\n\nexport default function App() {\n  return (\n    <div>\n      <AddTodo />\n      <TodoList />\n      <Footer />\n    </div>\n  );\n}\n')),Object(r.b)("h2",{id:"passing-the-store"},"Passing the Store"),Object(r.b)("p",null,"All components need access to the store so they can use the hooks to update atoms and subscribe to them. One option would be to pass it as a prop to every container component. However it gets tedious, as you have to wire store even through presentational components just because they happen to render a container deep in the component tree."),Object(r.b)("p",null,"The option we recommend is to use a special React component called ",Object(r.b)("inlineCode",{parentName:"p"},"<AtomRoot>")," to magically make the store available to all components in the application without passing it explicitly. You only need to use it once when you render the root component:"),Object(r.b)("h3",{id:"indexjs"},Object(r.b)("inlineCode",{parentName:"h3"},"index.js")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'import React from "react";\nimport ReactDOM from "react-dom";\nimport { AtomRoot } from "atom-state";\n\nimport App from "./App";\nimport store from "./store";\n\nconst rootElement = document.getElementById("root");\nReactDOM.render(\n  <React.StrictMode>\n    <AtomRoot store={store}>\n      <App />\n    </AtomRoot>\n  </React.StrictMode>,\n  rootElement\n);\n')),Object(r.b)("p",null,Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://codesandbox.io/s/todo-example-for-atom-state-u8h19?fontsize=14&hidenavigation=1&theme=dark"}),Object(r.b)("img",Object(o.a)({parentName:"a"},{src:"https://codesandbox.io/static/img/play-codesandbox.svg",alt:"Edit Todo Example for atom-state"})))))}d.isMDXComponent=!0},174:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return u}));var o=n(0),i=n.n(o);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),d=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=d(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,a=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=d(n),b=o,u=p["".concat(a,".").concat(b)]||p[b]||m[b]||r;return n?i.a.createElement(u,c(c({ref:t},s),{},{components:n})):i.a.createElement(u,c({ref:t},s))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=b;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var s=2;s<r;s++)a[s]=n[s];return i.a.createElement.apply(null,a)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);